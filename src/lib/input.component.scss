@use 'sass:math';
@import '@ngx-tc/base/src/assets/scss/base.scss';

@-webkit-keyframes autofill {
  to {
    color: #666;
    background: transparent;
  }
}
input:-webkit-autofill {
  -webkit-animation-name: autofill;
  -webkit-animation-fill-mode: both;
}
@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}

:host {
  --tc-input-fs: var(--tc-base-fs);
  --tc-input-ff: var(--tc-base-ff);
  --tc-input-fw: var(--tc-base-fw);
  --tc-input-module-rem: var(--tc-base-module-rem);
  --tc-input-lh: var(--tc-base-lh);
  --tc-input-shape: calc(var(--tc-input-module-rem) * 2);
  --tc-input-shadow-hover: var(--tc-base-shadow-hover);
  --tc-input-padding-h: calc(var(--tc-input-module-rem) * 2);
  --tc-input-padding-v: var(--tc-input-module-rem);
  --tc-input-border-style: solid;
  --tc-input-border-width: #{toRem(1)};

  // colors
  --tc-input-bg-default: #ebebeb;
  --tc-input-bg-hover: #ebebeb;
  --tc-input-bg-focus: #fff;
  --tc-input-bg-disabled: rgb(204,204,204,.1);
  --tc-input-bg-error: rgba(237,85,100,.1);
  --tc-input-border-default: #ebebeb;
  --tc-input-border-hover: #ebebeb;
  --tc-input-border-focus: #336cfb;
  --tc-input-border-disabled: rgb(204,204,204,.5);
  --tc-input-color-default: #1f2022;
  --tc-input-color-hover: #1f2022;
  --tc-input-color-focus: #1f2022;
  --tc-input-color-disabled: #bdbdbd;
  --tc-input-color-error: #ed5564;
  --tc-input-color-placeholder: #a8a8a8;

  // size sm
  --tc-input-fs-sm: calc(var(--tc-input-fs) * .9);
  --tc-input-lh-sm: 1.5873015873;
  --tc-input-shape-sm: calc(var(--tc-input-module-rem) * 1.5);
  --tc-input-padding-v-sm: calc(var(--tc-input-module-rem) * 0.5);

  // size lg
  --tc-input-fs-lg: calc(var(--tc-input-fs) * 1.3);
  --tc-input-lh-lg: 1.0989010989;
  --tc-input-shape-lg: calc(var(--tc-input-module-rem) * 2.5);
  --tc-input-padding-v-lg: calc(var(--tc-input-module-rem) * 1.5);

  border-radius: var(--tc-input-shape);
  color: var(--tc-input-color-default);
  display: block;
  font-size: var(--tc-input-fs);
  line-height: var(--tc-input-lh);
  outline: none;
  width: 100%;

  .tc-input-wrap {
    align-items: center;
    background: var(--tc-input-bg-default);
    border: var(--tc-input-border-width) var(--tc-input-border-style) var(--tc-input-border-default);
    border-radius: inherit;
    cursor: text;
    display: flex;
    outline: none;
    padding: 0 calc(#{var(--tc-input-padding-h)} - .2em);
    position: relative;
    transition:
      background .2s var(--tc-base-animation),
      border .2s var(--tc-base-animation),
      box-shadow .2s var(--tc-base-animation),
      color .2s var(--tc-base-animation);
    will-change: background, border, box-shadow, color;
    width: 100%;

    .input-infix {
      flex: auto;
      min-width: #{toRem(5)};
    }
    .input-control {
      background: none;
      border: 0;
      border-radius: inherit;
      box-shadow: none;
      color: inherit;
      cursor: inherit;
      display: block;
      font: inherit;
      margin: calc(var(--tc-input-border-width) * -1) 0;
      outline: none;
      padding: var(--tc-input-padding-v) .2em;
      width: 100%;

      @include placeholder {
        color: var(--tc-input-color-placeholder);
      }
    }
    .input-prefix,
    .input-suffix {
      color: var(--tc-input-color-placeholder);
      flex: none;
      padding: 0 .2em;
    }
    .input-icon {
      font-size: 1.3em;
    }
    .char-limiting {
      align-items: center;
      color: var(--tc-input-color-placeholder);
      display: flex;
      font-size: .9em;
      justify-content: center;
      padding: 0 .2em;
      pointer-events: none;
    }
  }
  &:hover {
    color: var(--tc-input-color-hover);

    .tc-input-wrap {
      background: var(--tc-input-bg-hover);
      border-color: var(--tc-input-border-hover);
      box-shadow: var(--tc-input-shadow-hover);
    }
  }
  &.input-focus {
    color: var(--tc-input-color-focus);

    .tc-input-wrap {
      background: var(--tc-input-bg-focus);
      border-color: var(--tc-input-border-focus);
      box-shadow: var(--tc-input-shadow-hover);
    }
  }
  &.ng-invalid.ng-touched,
  .has-error & {
    .tc-input-wrap {
      background-color: var(--tc-input-bg-error);
      border-color: var(--tc-input-color-error);
    }
  }
  &.input-sm {
    border-radius: var(--tc-input-shape-sm);
    font-size: var(--tc-input-fs-sm);
    line-height: var(--tc-input-lh-sm);

    .tc-input-wrap {
      .input-control {
        padding-top: var(--tc-input-padding-v-sm);
        padding-bottom: var(--tc-input-padding-v-sm);
      }
      .input-icon {
        font-size: 1.1em;
      }
    }
  }
  &.input-lg {
    border-radius: var(--tc-input-shape-lg);
    font-size: var(--tc-input-fs-lg);
    line-height: var(--tc-input-lh-lg);

    .tc-input-wrap {
      .input-control {
        padding-top: var(--tc-input-padding-v-lg);
        padding-bottom: var(--tc-input-padding-v-lg);
      }
    }
  }
  &.input-disabled,
  &.input-readonly {
    color: var(--tc-input-color-disabled);

    .tc-input-wrap {
      background-color: var(--tc-input-bg-disabled);
      border-color:  var(--tc-input-border-disabled);
      box-shadow: none !important;
      cursor: not-allowed;

      .input-control {
        pointer-events: none;
      }
    }
  }
}
